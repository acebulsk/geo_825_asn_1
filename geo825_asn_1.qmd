---
title: "Assignment 01: Model Mechanics"
author: Alex Cebulski
date: today
---

```{r}
#| include: false
library(tidyverse)
```


# Compute the diagnostic variables used in the flux parameterizations

## Define the Functions

Define the global parameter set:

```{r}
nonLinearityWetFrac <- 2/3 # Non-linearity in the wetted fraction of the canopy (-)
canopyInterceptionCapacity <- 3.00 # Maximum non-drainable interception storage (mm)
canopyDrainageConstant <- 0.50 # Canopy drainage coefficient (day-1)
fieldCapacity <- 25.00 # Field capacity (mm)
unsatMaxStorage <- 100.00 # Maximum storage in the unsaturated zone (mm)
nonLinearityVarSourceArea <- 0.25 # Non-linearity in the variable source area (-)
maxPerc <- 500.00 # Maximum percolation rate (mm day-1)
nonLinearityPerc <- 3.00 # Percolation non-linearity (-)
runoffCoefSatZone <- 0.10 # Runoff coefficient for the saturated zone (day-1)
```


The wetted fraction of the canopy is defined as:

$$
F_{wet}(S_c) = \begin{cases}
    \left(\frac{S_c}{S_{c,max}}\right)^\gamma,& \text{if } S_c\leq S_{c,max}\\
    1,              & \text{otherwise}
\end{cases}
$$

The corresponding function written in R is:

```{r}
wetFrac <- function(canopyInterception){
  if (canopyInterception <= canopyInterceptionCapacity) {
    wetFracOut <- (canopyInterception/canopyInterceptionCapacity)^nonLinearityWetFrac
  }
  else {
    wetFracOut <- 1
  }
  return(wetFracOut)
}
```

The saturated fraction is defined as:

$$
F_{sat} = \begin{cases}
    1-\left(1-\frac{S_{uz}}{S_{uz,max}}\right)^\alpha,& \text{if } S_{uz}< S_{uz,max}\\
    1,              & \text{otherwise}
\end{cases}
$$

The corresponding function for the saturated fraction written in R is:

```{r}
satFrac <- function(unsatStorage){
  if (unsatStorage < unsatMaxStorage) {
    satFracOut <- 1-(1-(unsatStorage/unsatMaxStorage))^nonLinearityVarSourceArea
  }
  else {
    satFracOut <- 1
  }
  return(satFracOut)
}
```

## Plot the fluxes as a function of the state variables

Example datasets

```{r}
wet_df <- data.frame(
  canopy_storage = seq(0, 3, by = 0.1)
)

wet_df$wet_frac <- sapply(wet_df$canopy_storage, wetFrac)
```

```{r}
sat_df <- data.frame(
  unsat_zone_storage = seq(0, 100, by = 1)
)

sat_df$sat_frac <- sapply(sat_df$unsat_zone_storage, satFrac)
```


```{r}
#| label: "fig-q-1"
#| layout-ncol: 2
#| fig-width: 4
#| fig-height: 4
#| fig-subcap: 
#| - " "
#| - " "
#| fig-cap: Diagnostic variables used in the flux calculations

ggplot(wet_df, aes(canopy_storage, wet_frac)) + 
  geom_line() +
  xlab('Canopy Storage (mm)') +
  ylab('Wetted Fraction (-)') +
  theme_bw()

ggplot(sat_df, aes(unsat_zone_storage, sat_frac)) + 
  geom_line() +
  xlab('Unsaturated Zone Storage (mm)') +
  ylab('Saturated Fraction (-)') +
  theme_bw()
```

# Compute the Model Fluxes

Our next step is to write functions to compute the model fluxes, i.e., eqs. (8) to (10) for the
vegetation canopy, eqs. (13) to (15) for the unsaturated zone, and eq. (17) for the saturated
zone.

## Define the flux functions: 

The function for equation 8, the flux of evaporation from interception storage, $E_c(S_c)$, is: 

```{r}
interceptEvap <- function(potentialEvap, wetFrac){
  return(potentialEvap*wetFrac)
}
```

The function for equation 9, the flux of canopy throughfall, $Q_t(S_c)$, is:

```{r}
canopyThroughfall <- function(precipInc, canopyInterception){
  if (canopyInterception < canopyInterceptionCapacity) {
    canopyThroughfall <- precipInc*(canopyInterception/canopyInterceptionCapacity)
  }
  else {
    canopyThroughfall <- precipInc
  }
  return(canopyThroughfall)
}
```


The function for equation 10, the flux of canopy drainage, $Q_c(S_c)$, is:

```{r}
canopyDrainage <- function(precipInc, canopyInterception){
  if (canopyInterception < canopyInterceptionCapacity) {
    canopyDrainageOut <- 0
  }
  else {
    canopyDrainageOut <- canopyDrainageConstant * (canopyInterception - canopyInterceptionCapacity) 
  }
  return(canopyDrainageOut)
}
```

The function for equation 13, the flux of evaporation from the unsaturated zone, $E_{uz}(S_{fc},S_{uz})$, is:

```{r}
unsatZoneEvap <- function(unsatStorage, potentialEvap, wetFrac){
  if (unsatStorage < fieldCapacity) {
    unsatZoneEvapOut <- potentialEvap*(unsatStorage/fieldCapacity)*(1-wetFrac)
  }
  else {
    unsatZoneEvapOut <- potentialEvap*(1-wetFrac)
  }
  return(unsatZoneEvapOut)
}
```

The function for equation 14, the flux of overland flow, $Q_o(S_c, S_{uz})$, is:

```{r}
overlandFlow <- function(precipExcess, satFrac){
  overlandFlowOut <- precipExcess*satFrac
}
```


The function for equation 15, the flux of percolation, $Q_p(S_{uz})$, is:

```{r}
percolation <- function(unsatStorage){
  if (unsatStorage < fieldCapacity) {
    percolationOut <- 0
  }
  else {
    percolationOut <- maxPerc * ((unsatStorage-fieldCapacity)/(unsatMaxStorage-fieldCapacity))^nonLinearityPerc
  }
  return(percolationOut)
}
```

The function for equation 16, the saturated fraction, $F_{sat}$, is:

```{r}
satFrac <- function(unsatStorage){
  if (unsatStorage < unsatMaxStorage) {
    satFracOut <- 1 - (1-(unsatStorage/unsatMaxStorage)^nonLinearityVarSourceArea)
  }
  else {
    satFracOut <- 1
  }
  return(satFracOut)
}
```

The function for equation 17, the flux of baseflow in the saturated zone, $Q_b$, is:

```{r}
baseflow <- function(satStorage){
  return(satStorage*runoffCoefSatZone)
}
```

The example forcing is 

```{r}
precip_inc <- 1 # mm day-1
pot_et <- 1 # mm day-1
```

```{r}
canopy_df <- data.frame(
  canopy_storage = seq(0, 4, 0.1)
)

canopy_df$wet_frac <- sapply(canopy_df$canopy_storage, wetFrac)

canopy_df$canopy_evap <- interceptEvap(potentialEvap = pot_et, wetFrac = canopy_df$wet_frac)

canopy_df$canopy_throughfall <- mapply(canopyThroughfall, precip_inc, canopy_df$canopy_storage)

canopy_df$canopy_drainage <- mapply(canopyDrainage, precip_inc, canopy_df$canopy_storage)


```

```{r}
soil_df <- data.frame(
  soil_storage = seq(0, 140, 1)
)

soil_df$soil_evap <- mapply(unsatZoneEvap, 
                            unsatStorage = soil_df$soil_storage,
                            potentialEvap = pot_et,
                            wetFrac = 0
                            )

soil_df$sat_frac <- mapply(satFrac, 
                            unsatStorage = soil_df$soil_storage
                            )

soil_df$soil_runoff <- mapply(overlandFlow, 
                            precipExcess = precip_inc,
                            satFrac = soil_df$sat_frac
                            )

soil_df$soil_percolation <- mapply(percolation, 
                            unsatStorage = soil_df$soil_storage
                            )

soil_df$soil_baseflow <- mapply(baseflow, 
                            satStorage = soil_df$soil_storage
                            )

```

```{r}
#| label: "fig-q-2"
#| layout-ncol: 3
#| layout-nrow: 4
#| fig-width: 3
#| fig-height: 3
#| fig-subcap: 
#| - " "
#| - " "
#| - " "
#| - " "
#| - " "
#| - " "
#| fig-cap: Diagnostic variables used in the flux calculations

ggplot(canopy_df, aes(canopy_storage, canopy_evap)) + 
  geom_line() +
  xlab('Canopy Storage (mm)') +
  ylab('Canopy Evaporation (mm/day)') +
  theme_bw()

ggplot(canopy_df, aes(canopy_storage, canopy_throughfall)) + 
  geom_line() +
  xlab('Canopy Storage (mm)') +
  ylab('Canopy Throughfall (mm/day)') +
  theme_bw()

ggplot(canopy_df, aes(canopy_storage, canopy_drainage)) + 
  geom_line() +
  xlab('Canopy Storage (mm)') +
  ylab('Canopy Drainage (mm/day)') +
  theme_bw()

ggplot(soil_df, aes(soil_storage, soil_evap)) + 
  geom_line() +
  xlab('Soil Storage (mm)') +
  ylab('Soil Transpiration (mm/day)') +
  theme_bw()

ggplot(soil_df, aes(soil_storage, soil_runoff)) + 
  geom_line() +
  xlab('Soil Storage (mm)') +
  ylab('Soil Surface Runoff (mm/day)') +
  theme_bw()

ggplot(soil_df, aes(soil_storage, soil_percolation)) + 
  geom_line() +
  xlab('Soil Storage (mm)') +
  ylab('Soil Percolation (mm/day)') +
  theme_bw()

ggplot(soil_df, aes(soil_storage, soil_baseflow)) + 
  geom_line() +
  xlab('Soil Storage (mm)') +
  ylab('Soil Baseflow (mm/day)') +
  theme_bw()
```

# Solve Individual ODEs

## Write a function to compute the RHS of the ODEs

Write a function for the RHS of equation 1 & 4, the change in canopy storage over time:

$$
\frac{dS_c}{dt} = P - E_c(S_c) - Q_t(S_c) - Q_c(S_c)
$$

```{r}
delCanopyStorage <- function(precipInc, canopyEvap, canopyThroughfall, canopyDrainage){
  delCanopyStorageOut <- precipInc - canopyEvap - canopyThroughfall - canopyDrainage
  
  return(delCanopyStorageOut)
}
```

Write a function for the RHS of equation 2 & 5, the change in storage in the unsaturated zone over time:

$$
\frac{dS_{uz}}{dt} = P_e(S_c) - E_c(S_c,S_{uz}) - Q_o(S_c, S_{uz}) - Q_p(S_{uz})
$$

```{r}
# precipExcess is the effective precipitation flux, canopy throughfall plus canopy drainage (mm day)

delUnsatStorage <- function(precipExcess, unsatZoneEvap, overlandFlow, percolation){
  delUnsatStorageOut <- precipExcess - unsatZoneEvap - overlandFlow - percolation
  
  return(delUnsatStorageOut)
}
```

Write a function for the RHS of equation 3 & 6, the change in the saturated zone over time:

$$
\frac{dS_{uz}}{dt} = Q_p(S_{uz}) - Q_b(S_{uz})
$$

```{r}
delSatStorage <- function(percolation, baseflow){
  delSatStorageOut <- percolation - baseflow
  
  return(delSatStorageOut)
}
```

## Define the forcing for the below examples 

Example Forcing

```{r}
daily_df <- data.frame(
  datetime = seq(as.POSIXct('2023-01-01'), as.POSIXct('2023-01-10'), by = 'day'),
  ppt = 100, # The precipitation flux: P = 100 mm day−1
  ppe = 100, # The effective precipitation flux: Pe = 100 mm day−1 .
  pet = 5 # The potential ET flux: Ep = 5 mm day−1
  )

hourly_df <- data.frame(
  datetime = seq(as.POSIXct('2023-01-01'), as.POSIXct('2023-01-11'), by = 'hour'),
  ppt = 100, # The precipitation flux: P = 100 mm day−1
  ppe = 100, # The effective precipitation flux: Pe = 100 mm day−1 .
  pet = 5 # The potential ET flux: Ep = 5 mm day−1
  )

five_min_df <- data.frame(
  datetime = seq(as.POSIXct('2023-01-01'), as.POSIXct('2023-01-11'), by = '5 min'),
  ppt = 100, # The precipitation flux: P = 100 mm day−1
  ppe = 100, # The effective precipitation flux: Pe = 100 mm day−1 .
  pet = 5 # The potential ET flux: Ep = 5 mm day−1
  )

```

## Temporally Integrate eq 4

Define a explicit euler based function to step through our various time series and calculat the change in canopy storage.

```{r}
runCanopyStorageEuler <- function(df, canopyStorageInit, delTime){
  
  # update the initial conditions for the canopy
  df$canopy_storage <- c(canopyStorageInit, rep(NA, nrow(df)-1))
  
  df$wet_frac <- NA
  df$canopy_evap <- NA
  df$canopy_throughfall <- NA
  df$canopy_drainage <- NA
 
  # set-up time loop
  for (i in 1:(nrow(df)-1)) {
    
  # calculate the fluxes     
  df$wet_frac[i] <- 
    wetFrac(canopyInterception = df$canopy_storage[i])
  
  df$canopy_evap[i] <- 
    interceptEvap(potentialEvap = df$pet[i], 
                  wetFrac = df$wet_frac[i])   
  
  df$canopy_throughfall[i] <- 
    canopyThroughfall(precipInc = df$ppt[i], 
                      canopyInterception = df$canopy_storage[i])
  
  df$canopy_drainage[i] <- 
    canopyDrainage(precipInc = df$ppt[i], 
                   canopyInterception = df$canopy_storage[i]) 
  
  # calculate the change in storage due to current fluxes
   del_canopy_storage <- delCanopyStorage(df$ppt[i],
                                          df$canopy_evap[i],
                                          df$canopy_throughfall[i],
                                          df$canopy_drainage[i]
                                          ) * delTime
  # calculate the state of the next time step (cannot be < 0)
  df$canopy_storage[i+1] <- max(c(df$canopy_storage[i] + del_canopy_storage, 0))
  }
  return(df)
}
```

Initial conditions for canopy storage 

```{r}
canopy_storage_int <- 0 # the initial conditions of the canopy at time start (m)
```

Run for our daily set

```{r}
delTime <- 1 # day

daily_df <- runCanopyStorageEuler(daily_df, canopy_storage_int, delTime)
```

Run for hourly

```{r}
delTime <- 1/24 # (day)

hourly_df <- runCanopyStorageEuler(hourly_df, canopy_storage_int, delTime)
```

Run for 5-minute

```{r}
delTime <- 5/1440 # (day)

five_min_df <- runCanopyStorageEuler(five_min_df, canopy_storage_int, delTime)
```

Plot the output for each time series

```{r}
#| label: "fig-q-3"
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3
#| fig-subcap: 
#| - "Daily"
#| - "Hourly"
#| - "5-min"
#| fig-cap: Diagnostic variables used in the flux calculations

ggplot(daily_df, aes(datetime, canopy_storage)) + 
  geom_line() +
  xlab('datetime') +
  ylab('Canopy Storage (mm)') +
  theme_bw()

ggplot(hourly_df, aes(datetime, canopy_storage)) + 
  geom_line() +
  xlab('datetime') +
  ylab('Canopy Storage (mm)') +
  theme_bw()

ggplot(five_min_df, aes(datetime, canopy_storage)) + 
  geom_line() +
  xlab('datetime') +
  ylab('Canopy Storage (mm)') +
  theme_bw()
```

## Temporally Integrate eq. 5

Define a explicit euler based function to step through our various time series and calculate the change in storage in the unsaturated zone

```{r}
runUnsatStorageEuler <- function(df, unsatStorageInit, delTime){
  # update the initial conditions for the unsaturated zone
  df$unsat_storage <- c(unsatStorageInit, rep(NA, nrow(df)-1))
  df$unsat_evap <- NA
  df$overland_flow <- NA
  df$percolation <- NA

  # set-up time loop
  for (i in 1:(nrow(df)-1)) {
    
  # calculate the fluxes     
  df$unsat_evap[i] <- 
    unsatZoneEvap(unsatStorage = df$unsat_storage[i],
                  potentialEvap = df$pet[i],
                  wetFrac = df$wet_frac[i])
  
  sat_frac_current <- 
    satFrac(unsatStorage = df$unsat_storage[i])  
  
  df$overland_flow[i] <- 
    overlandFlow(precipExcess = df$ppe[i], 
                 satFrac = sat_frac_current)   
  
  df$percolation[i] <- 
    percolation(unsatStorage = df$unsat_storage[i])
  
  # calculate the change in storage due to current fluxes
   del_unsat_storage <- delUnsatStorage(df$ppe[i],
                                          df$unsat_evap[i],
                                          df$overland_flow[i],
                                          df$percolation[i]
                                          ) * delTime
   
  # calculate the state of the next time step (cannot be < 0)
  df$unsat_storage[i+1] <- max(c(df$unsat_storage[i] + del_unsat_storage, 0))
  }
  
  # return the time series output
  return(df)
}
```

Initial conditions for the unsaturated zone and set wet frac to 0 so this control volume is run in isolation.

```{r}

# the initial conditions of the canopy at time start (m)
unsat_storage_int <- 0 

# use a constant value of zero for the wet fraction to isolate 
# this control volume from the canopy

daily_df$wet_frac <- 0
hourly_df$wet_frac <- 0
five_min_df$wet_frac <- 0
```

Run for our daily set

```{r}
delTime <- 1 # day

daily_df <- runUnsatStorageEuler(daily_df, unsat_storage_int, delTime)
```

Run for hourly

```{r}
delTime <- 1/24 # (day)

hourly_df <- runUnsatStorageEuler(hourly_df, unsat_storage_int, delTime)
```

Run for 5-minute

```{r}
delTime <- 5/1440 # (day)

five_min_df <- runUnsatStorageEuler(five_min_df, unsat_storage_int, delTime)
```

Plot the output for each time series

```{r}
#| label: "fig-q-3"
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3
#| fig-subcap: 
#| - "Daily"
#| - "Hourly"
#| - "5-min"
#| fig-cap: Diagnostic variables used in the flux calculations

ggplot(daily_df, aes(datetime, unsat_storage)) + 
  geom_line() +
  xlab('datetime') +
  ylab('Unsaturated Zone Storage (mm)') +
  theme_bw()

ggplot(hourly_df, aes(datetime, unsat_storage)) + 
  geom_line() +
  xlab('datetime') +
  ylab('Unsaturated Zone Storage (mm)') +
  theme_bw()

ggplot(five_min_df, aes(datetime, unsat_storage)) + 
  geom_line() +
  xlab('datetime') +
  ylab('Unsaturated Zone Storage (mm)') +
  theme_bw()
```

## Repeat the temporal integration of eq. 5 using upated parameters

Update to new parameters and set initial unsaturated storage to zero and wet frac to 0 so this control volume is run in isolation.

```{r}
# update the parameters for maximum storage and field capacity

unsatMaxStorage <- 10 # Maximum storage in the unsaturated zone (mm)
fieldCapacity <- 2.5 # Field Capacity (mm)

# use a constant value of zero for the wet fraction to isolate 
# this control volume from the canopy

wet_frac_const <- 0
```

Run for our daily set

```{r}
delTime <- 1 # day

daily_df <- runUnsatStorageEuler(daily_df, unsat_storage_int, delTime)
```

Run for hourly

```{r}
delTime <- 1/24 # (day)

hourly_df <- runUnsatStorageEuler(hourly_df, unsat_storage_int, delTime)
```

Run for 5-minute

```{r}
delTime <- 5/1440 # (day)

five_min_df <- runUnsatStorageEuler(five_min_df, unsat_storage_int, delTime)
```

Plot the output for each time series

```{r}
#| label: "fig-q-3"
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3
#| fig-subcap: 
#| - "Daily"
#| - "Hourly"
#| - "5-min"
#| fig-cap: Diagnostic variables used in the flux calculations

ggplot(daily_df, aes(datetime, unsat_storage)) + 
  geom_line() +
  xlab('datetime') +
  ylab('Canopy Storage (mm)') +
  theme_bw()

ggplot(hourly_df, aes(datetime, unsat_storage)) + 
  geom_line() +
  xlab('datetime') +
  ylab('Canopy Storage (mm)') +
  theme_bw()

ggplot(five_min_df, aes(datetime, unsat_storage)) + 
  geom_line() +
  xlab('datetime') +
  ylab('Canopy Storage (mm)') +
  theme_bw()
```

# Solve the Coupled ODE System

## Define synthetic precipitation

The equation for calculating synthetic precip is: 

$$
P(t) = P_{max} exp \left[-\left(\frac{\overline{t} - t}{\sigma t}\right)^2\right]
$$
where $t$ is the vector of time steps in days, $\overline{t}$ is the time of the precipitation peak. 

Define constants: 

```{r}
maxPrecipRate <- 100 # The maximum precipitation rate (mm day-1)

scalePrecipPeak <- 0.24 # A scale factor that affects the duration of the precipitation peak

precipPeak <- 2 # the time of the precipitation peak (days)
```

Define the synthetic precipitation function

```{r}
syntheticPrecip <- function(day, maxPrecipRate, precipPeak, scalePrecipPeak) {
  synthPrecipOut <- maxPrecipRate * exp(-((precipPeak-day)/scalePrecipPeak)^2)
  
  return(synthPrecipOut)
}
```

```{r}
numeral_days <- seq(1, 10, by = 10/2881)



five_min_df <- data.frame(datetime = seq(as.POSIXct('2023-01-01'), 
                                      as.POSIXct('2023-01-11'), by = '5 min') )

five_min_df$fractional_day <- as.numeric(
  julian(five_min_df$datetime, 
         origin = as.POSIXct('2023-01-01'))
  )

five_min_df$ppt <- sapply(five_min_df$fractional_day, syntheticPrecip,
                            maxPrecipRate = maxPrecipRate,
                            precipPeak = precipPeak,
                            scalePrecipPeak = scalePrecipPeak)
```

Plot the synthetic precipitation data

```{r}
ggplot(five_min_df, aes(datetime, ppt)) + 
  geom_line()+
  xlab(element_blank()) +
  ylab('Synthetic Precipitation (mm)') +
  theme_bw()
```

## Define the function for the saturated zone 

```{r}
runSatStorageEuler <- function(df, satStorageInit, delTime){
  # update the initial conditions for the unsaturated zone
  df$sat_storage <- c(satStorageInit, rep(NA, nrow(df)-1))
  df$baseflow <- NA

  # set-up time loop
  for (i in 1:(nrow(df)-1)) {
    
  # calculate the fluxes     
  
  # percolation is already computed in the unsaturated zone so commented out here
  # df$percolation <- percolation(df$unsat_storage[i])  
    
  # baseflow is the only new flux we need to calculate here  
  df$baseflow[i] <- baseflow(df$sat_storage[i])
  
  # calculate the change in storage due to current fluxes
   del_sat_storage <- delSatStorage(df$percolation[i],
                                    df$baseflow[i]
                                    ) * delTime
   
  # calculate the state of the next time step (cannot be < 0)
  df$sat_storage[i+1] <- max(c(df$sat_storage[i] + del_sat_storage, 0))
  }
  
  # return the time series output
  return(df)
}
```

## Create function for the coupled model 

```{r}
runCoupledModel <- function(df, 
                            canopyStorageInit, 
                            unsatStorageInit, 
                            satStorageInit, 
                            delTime){
  
  canopy_update <- runCanopyStorageEuler(df, 
                                         canopyStorageInit, 
                                         delTime)
  
  canopy_update$ppe <- canopy_update$canopy_throughfall + canopy_update$canopy_drainage
  
  unsat_update <- runUnsatStorageEuler(canopy_update, 
                                       unsatStorageInit, 
                                       delTime)
  
  model_out <- runSatStorageEuler(unsat_update, 
                                  satStorageInit, 
                                  delTime)
  
  return(model_out)
  
}
```

## Run the full coupled model

Set the initial conditions and forcing

```{r}
# the time interval is set to 5 minute
delTime <- 5/1440 # fraction of a day (day

# potential evaportaion is constant at 5 mm day-1
five_min_df$pet <- rep(5, nrow(five_min_df))

# initial conditions of the canopy 
canopy_storage_init <- 0 # initial storage in the canopy at model start (mm)

# initial conditions of the unsaturated zone
unsat_storage_init <- 10 # initial storage in the unsaturated zone at model start (mm)

# initial conditions of the saturated zone
sat_storage_init <- 1 # initial storage in the saturated zone at model start (mm)
```

Run the model

```{r}
model_out <- runCoupledModel(five_min_df, 
                             canopyStorageInit = canopy_storage_init,
                             unsatStorageInit = unsat_storage_init,
                             satStorageInit = sat_storage_init,
                             delTime = delTime)

model_out$total_runoff <- model_out$overland_flow + model_out$baseflow
```

Plot the model output

```{r}
ggplot(model_out, aes(datetime, canopy_storage)) +
  geom_line()+
  xlab(element_blank()) +
  ylab('Canopy Storage (mm)') +
  theme_bw()

ggplot(model_out, aes(datetime, unsat_storage)) +
  geom_line()+
  xlab(element_blank()) +
  ylab('Unsaturated Zone Storage (mm)') +
  theme_bw()

ggplot(model_out, aes(datetime, sat_storage)) +
  geom_line()+
  xlab(element_blank()) +
  ylab('Saturated Zone Storage (mm)') +
  theme_bw()

ggplot(model_out, aes(datetime, overland_flow+baseflow)) +
  geom_line()+
  xlab(element_blank()) +
  ylab('Runoff (mm)') +
  theme_bw()
```

